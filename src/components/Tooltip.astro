---
import "tippy.js/dist/tippy.css"
---

<style is:global>
  abbr,
  button[data-tooltip],
  span[data-tooltip],
  div[data-tooltip] {
    cursor: help;
    text-decoration-style: dotted;
    text-decoration-line: underline;
    text-decoration-color: rgb(161, 161, 170);
    text-decoration-thickness: 1.5px;
    transition-duration: 0ms;
  }
  abbr,
  span[data-tooltip] {
    &:hover {
      transition-duration: 150ms;
      color: transparent;
      background-clip: text;
      background-image: linear-gradient(90deg, #e6c75f, #e65f5f);
    }
  }
  .tippy-box[data-theme~="gradient-accent"] {
    background-color: black;
  }
  .tippy-box[data-theme~="gradient-accent"] > .tippy-content {
    font-weight: 400;
    background: linear-gradient(90deg, #e6c75f, #e65f5f);
    color: transparent;
    background-clip: text;
  }
  .tippy-box[data-theme~="gradient-accent"] > .tippy-content a {
    text-decoration: underline;
    text-decoration-color: #e6805f;
  }
  .tippy-box[data-theme~="gradient-accent"] > .tippy-content a:hover {
    background: linear-gradient(90deg, #e65f5f, #e6c75f);
    color: transparent;
    background-clip: text;
  }
  .tippy-box[data-theme~="gradient-accent"][data-placement^="top"]
    > .tippy-arrow::before {
    border-top-color: black;
  }
  .tippy-box[data-theme~="gradient-accent"][data-placement^="bottom"]
    > .tippy-arrow::before {
    border-bottom-color: black;
  }
  .tippy-box[data-theme~="gradient-accent"][data-placement^="left"]
    > .tippy-arrow::before {
    border-left-color: black;
  }
  .tippy-box[data-theme~="gradient-accent"][data-placement^="right"]
    > .tippy-arrow::before {
    border-right-color: black;
  }
  div[id^="tooltip-"] {
    color: #e6805f;
    display: none;
  }
</style>

<script>
  import tippy from "tippy.js"

  document.addEventListener("astro:page-load", () => {
    const tips = document.querySelectorAll("abbr, [data-tooltip]")
    for (const tooltip of tips) {
      const t = tooltip as HTMLElement
      let content = ""
      if (t.hasAttribute("title")) {
        content = t.getAttribute("title") ?? ""
        t.dataset.title = content
        t.removeAttribute("title")
      } else {
        const dataTooltip = t.dataset.tooltip
        if (!dataTooltip) {
          return
        }

        if (dataTooltip.startsWith("TooltipRef#")) {
          const [, tooltipRef] = dataTooltip.split("TooltipRef#")
          content =
            document.querySelector(`#tooltip-${tooltipRef}`)?.innerHTML ?? ""
        } else {
          content = dataTooltip
        }
      }
      tippy(t, {
        allowHTML: true,
        content,
        delay: [0, 100],
        interactive: true,
        theme: "gradient-accent",
      })
    }
  })
</script>
