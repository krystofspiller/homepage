---
import { parseHTML } from "linkedom"
import { twMerge } from "tailwind-merge"
import Link from "./Link.astro"

const html = await Astro.slots.render("default")
const { document } = parseHTML(html)

type Toc = { level: number; name: string; id: string | null }[]

const toc: Toc = []
let minLevel = Number.MAX_SAFE_INTEGER
const getHeadings = (
  content: Document | HTMLElement | null,
  toc: Toc,
): void => {
  const children = content?.children ?? []
  for (const c of children) {
    const child = c as HTMLElement
    if (["H2", "H3", "H4"].includes(child.tagName)) {
      const level = Number.parseInt(child.tagName.replace("H", ""), 10)
      minLevel = Math.min(minLevel, level)
      toc.push({
        id: child.getAttribute("id"),
        level,
        name: child.dataset.toc ?? child.textContent?.trim() ?? "",
      })
    }
    getHeadings(child, toc)
  }
}
getHeadings(document, toc)
---

<div>
  {
    toc.length > 0 && (
      <>
        <nav class="sticky top-16 ml-[576px] hidden h-0 min-w-56 text-xs leading-6 text-zinc-400 lg:block">
          <ul class="h-[calc(100vh-4rem)] overflow-scroll p-4 pt-0">
            {toc.map((val, index) => (
              <li
                data-id={val.id}
                class={twMerge(
                  "transition-colors duration-300",
                  index === 0 ? "text-white" : "",
                )}
                style={`margin-left: ${val.level - minLevel}rem`}
              >
                <Link className="no-underline!" href={`#${val.id}`}>
                  {val.name}
                </Link>
              </li>
            ))}
          </ul>
        </nav>
        <nav class="fixed bottom-0 left-0 z-100 flex h-14 w-full items-center justify-center bg-neutral-950 p-2 text-zinc-400 lg:hidden">
          <select
            class="rounded-lg border border-transparent p-2.5 pr-10 text-zinc-400 outline-none focus:border-blue-500 focus:ring-blue-500"
            id="mobile-toc-select"
            aria-label="Section"
          >
            {toc.map((val) => (
              <option value={val.id}>
                {"\u00A0\u00A0".repeat(val.level - minLevel)}
                {val.name}
              </option>
            ))}
          </select>
        </nav>
      </>
    )
  }
  <slot />
</div>

<script>
  import { usesSideNavigable } from "@utils/store"

  const mobileTocSelect = document.querySelector("#mobile-toc-select")
  usesSideNavigable.set(!!mobileTocSelect)
</script>

<script is:inline data-astro-rerun define:vars={{ toc }}>
  const mobileSelect = document.querySelector("#mobile-toc-select")
  mobileSelect?.addEventListener("change", (e) => {
    const selectedId = e.target.value
    if (!selectedId) {
      return
    }

    const element = document.querySelector(`#${selectedId}`)
    element?.scrollIntoView({ behavior: "smooth" })
  })

  // Register scroll events for all toc elements
  const tocElements = []
  for (const row of toc) {
    const element = document.querySelector(`#${row.id}`)
    if (element) {
      tocElements.push({ element, id: row.id })
    }
  }

  // Function to update active navigation item based on scroll position
  // oxlint-disable-next-line explicit-function-return-type
  const updateActiveNavItem = () => {
    if (toc.length === 0) {
      return
    }

    const scrollMarginOffset = 64
    const scrollPosition = window.scrollY + scrollMarginOffset

    let activeId = toc[0].id
    for (const { element, id } of tocElements) {
      const rectTop = element.getBoundingClientRect().top

      if (rectTop + window.scrollY <= scrollPosition) {
        activeId = id
      }
    }

    // Update navigation items
    const navItems = document.querySelectorAll("[data-id]")
    for (const item of navItems) {
      const isActive = item.dataset.id === activeId
      item.classList.toggle("text-white", isActive)
      item.classList.toggle("text-zinc-400", !isActive)
    }

    // Update mobile select
    if (activeId && mobileSelect) {
      mobileSelect.value = activeId
    }
  }

  // Add scroll event listener
  window.addEventListener("scroll", updateActiveNavItem)

  // Initial call to set the correct active item on page load
  updateActiveNavItem()
</script>
