---
import { parseHTML } from "linkedom"
import Link from "./Link.astro"

const html = await Astro.slots.render("default")
const { document } = parseHTML(html)

type Toc = Array<{ level: number; name: string; id: string | null }>

const toc: Toc = []
let minLevel = Number.MAX_SAFE_INTEGER
function getHeadings(content: Document | HTMLElement | null, toc: Toc) {
  const children = content?.children ?? []
  for (const c of children) {
    const child = c as HTMLElement
    if (["H2", "H3", "H4"].includes(child.tagName)) {
      const help = child.tagName.split("H")
      if (help.length !== 2) {
        continue
      }
      const level = parseInt(child.tagName.split("H")[1]!)
      minLevel = Math.min(minLevel, level)
      toc.push({
        level,
        name: child.getAttribute("data-toc") ?? child.innerText?.trim(),
        id: child.getAttribute("id"),
      })
    }
    getHeadings(child, toc)
  }
}
getHeadings(document, toc)
---

<div>
  <div
    class="sticky top-16 ml-[576px] hidden h-0 min-w-56 text-xs leading-6 text-zinc-400 lg:block"
  >
    <ul class="h-[calc(100vh-4rem)] overflow-scroll p-4 pt-0">
      {
        toc.map((val, index) => (
          <li
            data-id={val.id}
            class={`transition-colors duration-300 ${index === 0 ? "text-white" : ""}`}
            style={`margin-left: ${val.level - minLevel}rem`}
          >
            <Link className="!no-underline" href={`#${val.id}`}>
              {val.name}
            </Link>
          </li>
        ))
      }
    </ul>
  </div>
  <div
    class="fixed bottom-0 left-0 z-100 flex h-14 w-full items-center justify-center bg-neutral-950 p-2 text-zinc-400 lg:hidden"
  >
    <select
      class="rounded-lg border border-transparent p-2.5 pr-10 text-zinc-400 outline-none focus:border-blue-500 focus:ring-blue-500"
      id="mobile-toc-select"
      aria-label="Section"
    >
      {
        toc.map((val) => (
          <option value={val.id}>
            {"\u00A0\u00A0".repeat(val.level - minLevel)}
            {val.name}
          </option>
        ))
      }
    </select>
  </div>
  <slot />
</div>

<script>
  import { usesSideNavigable } from "@utils/store"
  usesSideNavigable.set(true)
</script>

<script is:inline data-astro-rerun define:vars={{ toc }}>
  const mobileSelect = document.getElementById("mobile-toc-select")
  mobileSelect?.addEventListener("change", (e) => {
    const selectedId = e.target.value
    if (!selectedId) {
      return
    }

    const element = document.getElementById(selectedId)
    element?.scrollIntoView({ behavior: "smooth" })
  })

  // Register scroll events for all toc elements
  const tocElements = []
  for (const row of toc) {
    const element = document.getElementById(row.id)
    if (element) {
      tocElements.push({ element, id: row.id })
    }
  }

  // Function to update active navigation item based on scroll position
  function updateActiveNavItem() {
    const scrollMarginOffset = 64
    const scrollPosition = window.scrollY + scrollMarginOffset

    let activeId = toc[0].id
    for (const { element, id } of tocElements) {
      const rectTop = element.getBoundingClientRect().top

      if (rectTop + window.scrollY <= scrollPosition) {
        activeId = id
      }
    }

    // Update navigation items
    const navItems = document.querySelectorAll("[data-id]")
    navItems.forEach((item) => {
      const isActive = item.getAttribute("data-id") === activeId
      item.classList.toggle("text-white", isActive)
      item.classList.toggle("text-zinc-400", !isActive)
    })

    // Update mobile select
    if (activeId && mobileSelect) {
      mobileSelect.value = activeId
    }
  }

  // Add scroll event listener
  window.addEventListener("scroll", updateActiveNavItem)

  // Initial call to set the correct active item on page load
  updateActiveNavItem()
</script>
