---
import "../styles/global.css"

import { ClientRouter } from "astro:transitions"

import Banners from "@components/Banners.astro"
import Footer from "@components/Footer.astro"
import Header from "@components/Header.astro"
import Spinner from "@components/Spinner.astro"

import { YEARS_OF_EXPERIENCE } from "@utils/constants"

const title = Astro.props.title
  ? `${Astro.props.title} | Krystof Spiller`
  : "Krystof Spiller"

const lookingForJob = false
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, minimum-scale=1"
    />
    <meta
      http-equiv="Content-Security-Policy"
      content="frame-src 'self' https://www.youtube.com https://open.spotify.com https://player.vimeo.com;"
    />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link
      rel="preload"
      href="https://fonts.googleapis.com/css2?family=Geist:wght@100..900&display=swap"
      as="style"
      onload="this.onload=null;this.rel='stylesheet'"
    />
    <link
      rel="preload"
      href="https://fonts.googleapis.com/css2?family=Geist+Mono:wght@100..900&display=swap"
      as="style"
      onload="this.onload=null;this.rel='stylesheet'"
    />
    <noscript>
      <link
        href="https://fonts.googleapis.com/css2?family=Geist:wght@100..900&display=swap"
        rel="stylesheet"
      />
      <link
        href="https://fonts.googleapis.com/css2?family=Geist+Mono:wght@100..900&display=swap"
        rel="stylesheet"
      />
    </noscript>
    <title>{title}</title>
    <meta
      name="description"
      content={`Krystof Spiller is a detail-oriented software engineer with ${YEARS_OF_EXPERIENCE} years of experience.`}
    />
    <ClientRouter />
  </head>
  <body
    class="selection:bg-orange h-full min-h-screen bg-neutral-950 font-sans text-white selection:text-white"
  >
    {lookingForJob ? <Banners /> : <Header lookingForJob={lookingForJob} />}
    <div
      id="main-content"
      class="mx-auto flex h-full min-h-screen max-w-screen-sm flex-col justify-between px-6 pt-14 pb-14 selection:bg-gray-600 selection:text-white sm:px-8 lg:pb-0"
    >
      <main>
        {lookingForJob && <Header lookingForJob={lookingForJob} />}
        <slot />
      </main>
      <Footer />
    </div>
    <div
      id="loading"
      class="fixed top-0 left-0 z-50 hidden h-screen w-screen items-center justify-center bg-neutral-950/70 opacity-0 transition-all delay-150 duration-500"
    >
      <Spinner />
    </div>
  </body>
</html>

<script>
  import { GREETING_MESSAGE } from "@utils/constants"
  import { usesSideNavigable } from "@utils/store"
  import { initTooltip } from "@components/tooltip/tooltip"

  // oxlint-disable-next-line no-console
  console.log(...GREETING_MESSAGE)

  document.addEventListener("astro:page-load", () => {
    const buttons = document.querySelectorAll('[id^="tooltip-button-"]')
    for (const button of buttons) {
      const [, tooltipId] = button.id.split("tooltip-button-")
      const tooltip = document.querySelector(`#tooltip-content-${tooltipId}`)
      const arrow = document.querySelector(`#tooltip-arrow-${tooltipId}`)
      if (
        button &&
        tooltip instanceof HTMLElement &&
        arrow instanceof HTMLElement
      ) {
        initTooltip(button, tooltip, arrow)
      }
    }

    for (const anchor of document.querySelectorAll('a[href^="#"]')) {
      let timeout: NodeJS.Timeout | null = null
      anchor.addEventListener("click", (e) => {
        e.preventDefault()
        if (timeout) {
          clearTimeout(timeout)
        }
        const href = anchor.getAttribute("href")
        if (!href) {
          return
        }
        const currentUrl = new URL(globalThis.location.href)
        currentUrl.hash = href
        globalThis.history.replaceState(null, "", currentUrl.toString())
        const element = document.querySelector(href) as HTMLElement | null
        element?.scrollIntoView({
          behavior: "smooth",
        })

        // Make element focusable if it isn't already, then focus
        // Add a small delay to ensure smooth scrolling completes
        timeout = setTimeout(() => {
          if (element && !element.hasAttribute("tabindex")) {
            element.setAttribute("tabindex", "-1")
          }
          element?.focus()
        }, 800)
      })
    }
  })
  document.addEventListener("astro:before-preparation", () => {
    const loading = document.querySelector("#loading")
    if (!loading) {
      return
    }

    loading.classList.add("flex")
    loading.classList.remove("hidden")

    const BACKGROUND_OVERLAY_DELAY = 50
    globalThis.setTimeout(() => {
      loading.classList.add("opacity-100")
    }, BACKGROUND_OVERLAY_DELAY)
  })
  document.addEventListener("astro:after-preparation", () => {
    const loading = document.querySelector("#loading")
    if (!loading) {
      return
    }

    loading.classList.add("hidden")
    loading.classList.remove("flex")
    loading.classList.remove("opacity-100")
  })

  usesSideNavigable.subscribe((value) => {
    document.querySelector("#main-content")?.classList.toggle("pb-14", value)
    document.querySelector("#main-content")?.classList.toggle("pb-0", !value)
  })
</script>

<style>
  html,
  body {
    font-optical-sizing: auto;
  }
</style>
